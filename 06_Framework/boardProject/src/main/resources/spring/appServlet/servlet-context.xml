<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!--
		DispatcherServlet 생성 시 필요한 내용을 정의하는 파일
		HandlerMapping, ViewResolver, component-scan, 트랜잭션 관리자, 웹소켓, 인터셉터, 스케쥴러 등을 작성 
		HandlerMapping : 어떤 요청을 어떤 클래스/메서드로 연결하는지 제어하는 객체(이미 적혀 있음)
		<annotation-driven /> 이 	@RequestMapping, @GetMapping, @PostMapping 을 활성화하여 HandlerMapping을 대체
		ViewResolver : Controller에서 반환된 문자열(ex. “common/main” ) 
		앞, 뒤에 경로(/WEB-INF/views/), 확장자(.jsp)를 붙여 jsp 파일의 경로를 지정한 후 
		forward(요청 위임)을 하는 객체
		Component-scan : @Component와 자식 어노테이션을 Bean으로 등록하는 태그
	-->
	
	
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!--
	webapp/resources 폴더를 http get방식 요청으로 접근할 수 있다
	그렇게 해야 클라이언트들이 여기에 저장되어 있는 이미지를 사용할 수 있음
	-->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- ViewResolver -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!--  
		base-package 이하에 작성된
		@Component 와 자식 어노테이션
		(@Controller, @Service, @Repository)이 붙은 클래스를 찾아 Bean(Spring이 관리하는 객체)으로 등록
		@Repository : 우리가 쓰던 DAO
	-->
	<context:component-scan base-package="edu.kh.project" />
	<!-- context : 설정 -->
	
	<interceptors>
		<interceptor>
			<!-- 인터셉터가 동작할 url 패턴 -->
			<mapping path="/**"/> <!-- 슬래시 이하의 모든 경ㅇ로 -->
			<beans:bean id="boardTypeInterceptor" class="edu.kh.project.common.interceptor.BoardTypeInterceptor"/>
		</interceptor>	
	</interceptors>
	
	<!-- @Transactional 어노테이션 인식, 활성화 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- AOP Proxy를 이용한 관점 제어 자동화 -->
	<aop:aspectj-autoproxy/>
	
</beans:beans>


